import os
import subprocess
import yaml
import json
import random
import re

from copy import copy
from tqdm import tqdm


def main():
    random.seed(42)
    BASEDIR = os.getcwd()
    vuln_lines = list()
    for_multi_vuln_lines = dict()
    non_vuln_lines = list()
    to_predict = dict()
    ambiguous_fixes = list()

    with open('bad_commits.json', 'r') as fp:
        bad_commits = json.load(fp)

    with open('bad_cve.json', 'r') as fp:
        bad_cve = json.load(fp)

    if not os.path.isdir('project-kb'):
        subprocess.run('git clone https://github.com/SAP/project-kb')
        os.chdir('project-kb')
        subprocess.run('git checkout vulnerability-data --')
        os.chdir(BASEDIR)
    
    if not os.path.isdir('source_repos'):
        os.mkdir('source_repos')
    os.chdir('source_repos')

    for cve in tqdm(os.listdir('../project-kb/statements')):
        os.chdir(BASEDIR + '/source_repos')
        if(cve == '.keep' or cve in bad_cve):
            continue

        with open(f'../project-kb/statements/{cve}/statement.yaml', 'r', errors='ignore') as fp:
            cve_info = yaml.safe_load(fp)
        if 'fixes' in cve_info:
            for fix in cve_info['fixes']:
                
                os.chdir(BASEDIR + '/source_repos')
                project_name = (fix['commits'][0]['repository'].split('/')[-1].split('.git')[0] if  fix['commits'][0]['repository'].split('/')[-1] != '' else fix['commits'][0]['repository'].split('/')[-2].split('.git')[0])
                if into_test := random.randrange(0,10) == 9:
                    target_dict = to_predict
                else:
                    target_dict = for_multi_vuln_lines
                if project_name not in target_dict:
                    target_dict[project_name] = list()
                target_dict[project_name].append(fix)
                fix['vuln_lines'] = dict()
                fix['non_vuln_lines'] = dict()
                if not os.path.isdir(project_name):
                    subprocess.run(['git', 'clone', fix['commits'][0]['repository']])
                try:            
                    os.chdir(project_name)
                except FileNotFoundError:
                    ambiguous_fixes.append(fix)
                    continue
                
                for commit in fix['commits']:
                    if commit['id'] in bad_commits:
                        continue
                    fix['vuln_lines'][commit['id']] = dict()
                    fix['non_vuln_lines'][commit['id']] = dict()
                    subprocess.run(['git', 'checkout', commit['id'], '-f'])
                    
                    parent_hash = subprocess.check_output('git log --pretty=%P -n 1').decode('UTF8', 'ignore').strip()
                    if parent_hash == '' or len(parent_hash.split(' ')) > 1:
                        if fix not in ambiguous_fixes:
                            ambiguous_fixes.append(fix)
                        continue
                    for i in range(0,len(fix['commits'])):
                        fix['commits'][i]['parent'] = parent_hash
                    diff_data = subprocess.check_output(['git', 'diff', parent_hash]).decode('UTF8', 'ignore').strip()
                    in_java = False
                    current_line = 0
                    for line in diff_data.split('\n'):
                        first_char = line[0]
                        line = line[1:].strip()
                        if line.startswith('++') or line.startswith('--'):
                            path = copy(first_char + line)
                            in_java = line.split('.')[-1] == 'java'
                        elif line.startswith('@@'):
                            current_line = int(line.split(',')[0].split('-')[-1])
                        elif in_java and len(line) > 2 and (not (line.startswith('*') or line.startswith('//') or line.startswith('import') or line.startswith('package'))) and not re.match(".*[t,T]est.*", path) and line != '/**' and line[0] != '@':
                            if into_test:
                                if first_char == '-':
                                    if path not in fix['vuln_lines'][commit['id']]:
                                        fix['vuln_lines'][commit['id']][path] = list()
                                    fix['vuln_lines'][commit['id']][path].append(line)
                                elif first_char == '+':
                                    if path not in fix['non_vuln_lines'][commit['id']]:
                                        fix['non_vuln_lines'][commit['id']][path] = list()
                                    fix['non_vuln_lines'][commit['id']][path].append(line)
                            else:
                                if first_char == '-':
                                    vuln_lines.append(line)
                                    if path not in fix['vuln_lines'][commit['id']]:
                                        fix['vuln_lines'][commit['id']][path] = list()
                                    fix['vuln_lines'][commit['id']][path].append((line,current_line))
                                elif first_char == '+':
                                    non_vuln_lines.append(line)
                                    if path not in fix['non_vuln_lines'][commit['id']]:
                                        fix['non_vuln_lines'][commit['id']][path] = list()
                                    fix['non_vuln_lines'][commit['id']][path].append((line,current_line))
                        current_line += 1


    os.chdir(BASEDIR)        

    with open('ambig.json', 'w') as fp:
        json.dump(ambiguous_fixes, fp, indent=4)
    
    with open('vuln_lines.json', 'w') as fp:
        json.dump(vuln_lines, fp, indent=4)    

    with open('non_vuln_lines.json', 'w') as fp:
        json.dump(non_vuln_lines, fp, indent=4) 

    with open('to_predict.json', 'w') as fp:
        json.dump(to_predict, fp, indent=4)                   
                    
    with open('for_multi_vuln_lines.json', 'w') as fp:
        json.dump(for_multi_vuln_lines, fp, indent=4)     
   
if __name__ == '__main__':
    main()