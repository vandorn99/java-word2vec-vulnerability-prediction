import subprocess
import json
import os
import shutil
import itertools
from multiprocessing import Manager, freeze_support
from concurrent.futures import ProcessPoolExecutor

def sublistLexer(args):
    (to_lex, num) = args
    lexed = list()
    for line in to_lex:
        with open(f'./temp{num}.java', 'w') as f:
            try:
                f.write(line.strip() + '\n')
            except UnicodeEncodeError as e:
                pass
        subprocess.run(['java', '-jar', '../java_line_pred.jar','-num', str(num), f'./temp{num}.java'])
        with open(f'./corpus{num}.txt','r') as fp:
            lexed.append(fp.readline().strip())

        if os.path.exists(f'corpus{num}.txt'):
            os.remove(f'corpus{num}.txt')
    return lexed

def main():
    cpuCount = os.cpu_count()
    if not os.path.exists('./temp'):
        os.mkdir('temp')

    with open('./vuln_lines.json', 'r') as f:
        lines = list(set(json.load(f)))
    fraction = int(len(lines) / cpuCount)

    i = 0
    multi_input = list()
    while i+2*fraction < len(lines):
        multi_input.append((lines[i*fraction:(i+1)*fraction], i))
        i += 1
    multi_input.append((lines[(i+1)*fraction:], i))

    with ProcessPoolExecutor(max_workers=cpuCount) as executor:
        processes = executor.map(sublistLexer, multi_input)
    for file_name in os.listdir():
        if file_name.startswith(('temp', 'corpus')):
            try:
                os.remove(file_name)
            except PermissionError:
                shutil.rmtree(file_name)

    with open('lexed_vlr.json','w') as fp:
        json.dump(list(set(itertools.chain.from_iterable(processes))), fp, indent=4)

if __name__ == '__main__':
    main()
    freeze_support()