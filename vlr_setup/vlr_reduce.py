import json
import gensim.models.word2vec as wv

from tqdm import tqdm
from scipy import spatial
from predictor_funcs import avg_feature_vector, get_line_vuln


def should_remain(vuln_line, non_vlr_vecs, non_vuln_lines, model, features, index2word_set, EPSILON):
    if vuln_line not in non_vuln_lines:
        for non_vuln in non_vuln_lines:
            vuln_line_vec = avg_feature_vector(vuln_line, model, features, index2word_set)
            if non_vuln in non_vlr_vecs:
                non_vuln_line_vec = non_vlr_vecs[non_vuln]
            else:
                non_vuln_line_vec = avg_feature_vector(non_vuln, model, features, index2word_set)
                non_vlr_vecs[non_vuln] = non_vuln_line_vec
            if spatial.distance.cosine(vuln_line_vec, non_vuln_line_vec) <= EPSILON:
                return False
        return True
    return False

def main():
    EPSILON = 0.1

    model = wv.Word2Vec.load(f'../predictor/models/red_word2vec.model')
    features = 100
    index2word_set = set(model.wv.index2word)
    non_vlr_vecs = dict()
    reduced_vlr = list()


    with open('lexed_vlr.json', 'r') as fp:
        vlr = json.load(fp)
    
    with open('lexed_non_vlr.json', 'r') as fp:
        non_vuln_lines = json.load(fp)

    for vuln_line in tqdm(vlr):
        if should_remain(vuln_line, non_vlr_vecs, non_vuln_lines, model, features, index2word_set, EPSILON):
            reduced_vlr.append(vuln_line)
    with open('reduced_vlr.json', 'w') as fp:
        json.dump(reduced_vlr, fp, indent=4)



if __name__ == '__main__':
    main()