/*
 [The "BSD license"]
  Copyright (c) 2013 Terence Parr
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
  3. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.PredictionMode;

import java.io.*;
import java.lang.System;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

/* This more or less duplicates the functionality of grun (TestRig) but it
 * has a few specific options for benchmarking like -x2 and -threaded.
 * It also allows directory names as commandline arguments. The simplest test is
 * for the current directory:
~/antlr/code/grammars-v4/java $ java Test .
/Users/parrt/antlr/code/grammars-v4/java9/JavaBaseListener.java
/Users/parrt/antlr/code/grammars-v4/java9/Java9Lexer.java
/Users/parrt/antlr/code/grammars-v4/java9/JavaListener.java
/Users/parrt/antlr/code/grammars-v4/java9/JavaParser.java
/Users/parrt/antlr/code/grammars-v4/java9/Test.java
Total lexer+parser time 1867ms.
 */
public class Main {
    public static boolean threaded = false;
    public static boolean debug = false;
    public static int corpusNumber = -1;
    public static Worker[] workers = new Worker[Runtime.getRuntime().availableProcessors()];
    static int windex = 0;

    private static int fileNum = 1;

    public static CyclicBarrier barrier;

    public static volatile boolean firstPassDone = false;

    private static List<Thread> threads = new ArrayList<>();

    public static class Worker implements Runnable {
        public long parserStart;
        public long parserStop;
        List<String> files;
        public Worker(List<String> files) {
            this.files = files;
        }
        @Override
        public void run() {
            parserStart = System.currentTimeMillis();
            for (String f : files) {
                parseFile(f);
            }
            parserStop = System.currentTimeMillis();
            try {
                if(barrier!=null){
                    barrier.await();
                }
                
            }
            catch (InterruptedException ex) {
                return;
            }
            catch (BrokenBarrierException ex) {
                return;
            }
        }
    }

    public static void main(String[] args) {
        File temp = null;
        List<String> inputFiles = new ArrayList<String>();
        //long start = System.currentTimeMillis();
        try {
            if (args.length > 0 ) {
                // for each directory/file specified on the command line
                for(int i=0; i< args.length;i++) {
                    if ( args[i].equals("-threaded") ) threaded = true;
                    else if ( args[i].equals("-debug") ) debug = true;
                    else if (args[i].equals("-num")){
                        corpusNumber = Integer.parseInt(args[i+1]);
                        i++;
                    }
                    if ( args[i].charAt(0)!='-' ) { // input file name
                        inputFiles.add(args[i]);
                    }
                }
                if(corpusNumber == -1){
                    temp = new File("./temp_corpus");
                    if(!temp.exists()){
                        if(!temp.mkdir()){
                            System.err.println("Unable to create directory!");
                            System.exit(1);
                        }
                    }
                } else{
                    temp = new File("./temp_corpus" + corpusNumber);
                    if(!temp.exists()){
                        if(!temp.mkdir()){
                            System.err.println("Unable to create directory!");
                            System.exit(1);
                        }
                    }
                }

                List<String> javaFiles = new ArrayList<String>();
                for (String fileName : inputFiles) {
                    List<String> files = getFilenames(new File(fileName));
                    javaFiles.addAll(files);
                }
                doFiles(javaFiles);

            }
            else {
                System.err.println("Usage: java Main <directory or file name>");
            }
        }
        catch(Exception e) {
            System.err.println("exception: "+e);
            e.printStackTrace(System.err);   // so we can get stack trace
        }
        if(threaded){
            for (Thread t : threads) {
                try{
                    t.join();
                } catch (InterruptedException ex){
                    return;
                }
            }
            report();
        }


        long stop = System.currentTimeMillis();
        //		System.out.println("Overall time " + (stop - start) + "ms.");
        System.gc();

        if(!debug){
            combineCorpus(temp);
        }

    }

    public static void doFiles(List<String> files) throws Exception {
        long parserStart = System.currentTimeMillis();
//		lexerTime = 0;
        if ( threaded ) {
            int cores = Runtime.getRuntime().availableProcessors();
            int chunkSize = files.size() / cores;
            int p1 = 0;
            int p2 = chunkSize+1;
            int i = 0;
            do{
                if(p2+1 > files.size() || i==cores-2){
                    workers[i] = new Worker(files.subList(p1,files.size()));
                    System.out.println("Last worker created!");
                } else{
                    workers[i] = new Worker(files.subList(p1,p2));
                    System.out.println("Creating workers!");
                }
                threads.add(new Thread(workers[i], "worker-"+windex++));
                threads.get(threads.size()-1).start();
                p1 = i*chunkSize+1;
                p2 = (i+1) * chunkSize+1;
                i++;
            }while(i<cores-1 && p2+1 <= files.size());
        }
        else {
            for (String f : files) {
                parseFile(f);
            }
            long parserStop = System.currentTimeMillis();
            System.out.println("Total lexer+parser time " + (parserStop - parserStart) + "ms.");
        }
    }

    private static void report() {
        long time = 0;
        if ( workers!=null ) {
            // compute max as it's overlapped time
            for (Worker w : workers) {
                
                if(w==null){
                    break;
                }
                long wtime = w.parserStop - w.parserStart;
                time = Math.max(time,wtime);
                System.out.println("worker time " + wtime + "ms.");
            }
        }
        System.out.println("Total lexer+parser time " + time + "ms.");

        System.out.println("finished parsing OK");
    }

    public static List<String> getFilenames(File f) throws Exception {
        List<String> files = new ArrayList<String>();
        getFilenames_(f, files);
        return files;
    }

    public static void getFilenames_(File f, List<String> files) throws Exception {
        // If this is a directory, walk each file/dir in that directory
        if (f.isDirectory()) {
            String flist[] = f.list();
            for(int i=0; i < flist.length; i++) {
                getFilenames_(new File(f, flist[i]), files);
            }
        }

        // otherwise, if this is a java file, parse it!
        else if ( ((f.getName().length()>5) &&
                f.getName().substring(f.getName().length()-5).equals(".java")) )
        {
            files.add(f.getAbsolutePath());
        }
    }

    public static void parseFile(String f) {
        try {
            // Create a scanner that reads from the input stream passed to us
            Lexer lexer = new Java9Lexer(CharStreams.fromFileName(f));

            List<Token> tokens = (List<Token>) lexer.getAllTokens();
            Vocabulary vocabulary = lexer.getVocabulary();
            int lineNum = 1;

            BufferedWriter writer = null;

            if(!debug){
                if(corpusNumber == -1){
                    writer = new BufferedWriter(new FileWriter("./temp_corpus/corpus" + fileNum + ".txt"));
                }
                else{
                    writer = new BufferedWriter(new FileWriter("./temp_corpus"+ corpusNumber +"/corpus" + fileNum + ".txt"));
                }
            }

            List<String> tokenList = new ArrayList<>();

            for(Token token : tokens){
                String value = token.getText();
                String lexed;
                if (value.equals("1") || value.equals("0") || value.equals("-1")) {
                    lexed = value;
                }  else {
                    lexed = vocabulary.getDisplayName(token.getType());
                }

                int currentLine = token.getLine();
                if(lineNum != currentLine) {
                    lineNum = currentLine;
                    processTokens(tokenList, writer);
                    tokenList.clear();
                }

                tokenList.add(lexed);
            }
            processTokens(tokenList, writer);
            if(debug){
                return;
            }

            writer.flush();
            writer.close();
            fileNum++;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void processTokens(List<String> tokens, BufferedWriter writer) throws IOException {
        for(int i=0; i<tokens.size()-1; i++){
            if(tokens.get(i).equals("Identifier")){
                String next = tokens.get(i + 1);
                switch (next) {
                    case "'='":
                    case "'++'":
                    case "'+='":
                    case "'-='":
                    case "'*='":
                    case "'/='":
                    case "'&='":
                    case "'|='":
                    case "'^='":
                    case "'%='":
                    case "'<<='":
                    case "'>>='":
                    case "'>>>='":
                        tokens.set(i, "VariableIdentifier");
                        break;
                    case "'('":
                        tokens.set(i, "MethodIdentifier");
                        break;
                    case "'['":
                        tokens.set(i, "ArrayIdentifier");
                        break;
                    case "'.'":
                        tokens.set(i, "ObjectIdentifier");
                        break;
                }
            }
        }

        for(String token : tokens){
            if(debug){
                System.out.print(token + " ");
            } else{
                writer.write(token + " ");
            }
        }

        if(debug){
            System.out.println();
        } else{
            writer.newLine();
        }
    }

    private static void combineCorpus(File temp){
        BufferedWriter corpusWriter = null;
        //File temp = new File("./temp_corpus");
        try{
            if(corpusNumber == -1){
                corpusWriter = new BufferedWriter(new FileWriter("./corpus.txt", true));
            } else{
                corpusWriter = new BufferedWriter(new FileWriter("./corpus"+corpusNumber+".txt", true));
            }

            for(File file : temp.listFiles()){
                writeCorpus(file, corpusWriter);
            }
            corpusWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        cleanTemp(temp);
    }

    private static void writeCorpus(File file, BufferedWriter writer) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line = reader.readLine();
        while(line != null){
            writer.write(line);
            writer.newLine();
            line = reader.readLine();
        }
        writer.flush();
        reader.close();
    }

    private static void cleanTemp(File dir){
        for(File file : dir.listFiles()){
            if(!file.delete()){
                System.err.println("Failed to delete " + file);
            }
        }
    }
}
